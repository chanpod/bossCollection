'use Strict'
angular.module("BossCollection.controllers", ['BossCollection.services'])
    .controller("createEventController", ["$scope", 'CreateEventService', '$location', 'SendMail', function($scope, CreateEventService, $location, SendMail){
        $scope.event = {};
        $scope.date = {};
        $scope.event.emailAddress = "";
        $scope.event.emailAddressCheck = "";

        $scope.trim = function(stringToTrim){
            return stringToTrim.replace(/^\s+|\s+$/gm,'');
        };

        $('#eventName').popover({
            content: 'Name cannot be empty or contain only spaces.',
            trigger: 'manual'
        })

        $('#emailCheck').popover({
            content: 'Emails do not match. Please verify you have enter your email correclty.',
            trigger: 'manual'
        })

        $scope.validate = function(){

            var isValid = false;
            try {
                $scope.trim($scope.event.eventName);
                if ($scope.event.eventName || $scope.event.eventName.length > 0) {
                    $('#eventName').popover("hide");
                    isValid = true;
                }
                else {
                    $('#eventName').popover("show");
                    isValid = false;
                }

                $scope.trim($scope.event.emailAddress);
                $scope.trim($scope.event.emailAddressCheck);

                if($scope.event.emailAddress === $scope.event.emailAddressCheck && $scope.event.emailAddress.length > 0){
                    isValid = true;
                }
                else{
                    if($scope.event.emailAddress.length > 0){
                        $('#emailCheck').popover('show');
                    }

                    isValid = false;
                }
            }
            catch(err){
                console.log(err);

                return false;
            }

            return isValid;
        };

        $scope.submitEvent = function(){
            if($scope.validate()) {

                var events = new CreateEventService($scope.event);


                events.$save(function (response) {
                    console.log(response);
                    if($scope.event.emailAddress.length > 0){

                        var email = {
                            to : $scope.event.emailAddress,
                            from: "chanpod36@gmail.com",
                            subject: "Even Creation From WhoCanMakeIt",
                            text: response
                        }

                        var sendEmail = new SendMail(email);

                        sendEmail.$save(function(response){
                           console.log("The response: " + response);
                        });
                    }


                    $location.path("/viewEvent/" + response._id)
                });
            };
        }
    }])
    .controller("homeController", ["$scope", '$location', '$http', 'charService', '$timeout', 'guildServices',
        function($scope, $location, $http, charService, $timeout, guildServices){

            var guild = {
                "lastModified": 1415322407000,
                "name": "Crux",
                "realm": "Zul'jin",
                "battlegroup": "Ruin",
                "level": 25,
                "side": 1,
                "achievementPoints": 1875,
                "achievements": {
                    "achievementsCompleted": [4860, 4861, 4913, 4943, 4944, 4945, 4946, 4947, 4948, 4985, 4986, 4987, 4988, 4989, 4997, 5009, 5010, 5013, 5016, 5017, 5018, 5019, 5020, 5022, 5023, 5024, 5025, 5026, 5027, 5028, 5029, 5030, 5032, 5035, 5036, 5037, 5038, 5040, 5045, 5046, 5048, 5052, 5054, 5058, 5082, 5084, 5086, 5087, 5088, 5089, 5090, 5091, 5092, 5095, 5096, 5097, 5098, 5099, 5100, 5101, 5102, 5103, 5104, 5105, 5106, 5110, 5112, 5113, 5114, 5124, 5127, 5128, 5132, 5134, 5135, 5136, 5137, 5138, 5139, 5140, 5141, 5142, 5143, 5144, 5145, 5158, 5159, 5160, 5161, 5162, 5163, 5164, 5165, 5173, 5174, 5175, 5176, 5177, 5178, 5179, 5184, 5185, 5186, 5187, 5188, 5196, 5201, 5239, 5263, 5264, 5265, 5273, 5274, 5275, 5362, 5420, 5421, 5422, 5425, 5459, 5460, 5461, 5462, 5463, 5464, 5465, 5466, 5467, 5492, 5770, 5771, 5780, 5781, 5782, 5783, 5785, 5840, 5892, 5983, 5984, 6120, 6121, 6122, 6123, 6125, 6182, 6533, 6625, 6626, 6632, 6633, 6634, 6641, 6642, 6643, 6664, 6666, 6668, 6669, 6670, 6675, 6676, 6677, 6681, 6682, 6700, 6701, 6702, 6764, 6766, 6767, 6768, 6769, 6770, 6771, 6772, 6921, 7434, 7444, 7445, 7446, 7447, 7449, 7843, 7844, 8137, 8139, 8140, 8258, 8510, 8511, 8708],
                    "achievementsCompletedTimestamp": [1294957103000, 1292392037000, 1298644536000, 1292682208000, 1294483584000, 1296942259000, 1300153301000, 1318978776000, 1298354573000, 1297919408000, 1295930349000, 1295839284000, 1297919408000, 1292453403000, 1292978894000, 1292978894000, 1342585823000, 1318470710000, 1309148853000, 1295843947000, 1304916897000, 1298531223000, 1298531875000, 1295843331000, 1292562627000, 1305076182000, 1324135260000, 1307589095000, 1304983051000, 1354801708000, 1327875794000, 1308782128000, 1304644519000, 1357437872000, 1294935939000, 1291964482000, 1302655707000, 1291939356000, 1312276689000, 1344120580000, 1301287921000, 1292402480000, 1301280296000, 1306721320000, 1313024494000, 1318470710000, 1308541477000, 1308532485000, 1308543240000, 1298268276000, 1308540814000, 1297647708000, 1306727936000, 1306234294000, 1308291223000, 1303361616000, 1303362196000, 1306232186000, 1346490245000, 1306230221000, 1306231374000, 1306230827000, 1308290357000, 1306233564000, 1328469492000, 1346489402000, 1309205425000, 1345527821000, 1345529065000, 1346489402000, 1291710996000, 1291709784000, 1293856720000, 1292145205000, 1291896031000, 1292126724000, 1291945829000, 1292044035000, 1292107712000, 1292032578000, 1291966366000, 1291939356000, 1292145205000, 1300433382000, 1292372789000, 1400643805000, 1304813299000, 1309047999000, 1331076481000, 1366194583000, 1298646334000, 1313134548000, 1313378545000, 1292053127000, 1292536024000, 1292718992000, 1292034073000, 1292195637000, 1292178286000, 1292718993000, 1296006598000, 1342585822000, 1295068600000, 1292438887000, 1292392037000, 1292880416000, 1295229869000, 1301611093000, 1317567547000, 1310534088000, 1352775854000, 1302975758000, 1332198714000, 1312756538000, 1297184366000, 1305174473000, 1294271254000, 1297711464000, 1292300881000, 1293657489000, 1291786326000, 1324263827000, 1321847063000, 1324268436000, 1340078127000, 1295506011000, 1292560213000, 1292557907000, 1303453059000, 1303864335000, 1303867227000, 1303864335000, 1307596795000, 1311381097000, 1333503379000, 1308205594000, 1318382508000, 1309284538000, 1314679437000, 1339646381000, 1322602325000, 1322604907000, 1322610227000, 1323926737000, 1337655740000, 1329197559000, 1353975272000, 1400643805000, 1349065213000, 1365831123000, 1365831123000, 1376892598000, 1382332779000, 1382408355000, 1394937914000, 1352885927000, 1348815440000, 1350969383000, 1354256228000, 1355810097000, 1406002224000, 1381816113000, 1392359392000, 1348976719000, 1406002224000, 1358102515000, 1352791511000, 1372856980000, 1348907037000, 1348813466000, 1348904955000, 1348818907000, 1348820734000, 1348902592000, 1348970276000, 1348976719000, 1365831123000, 1348820734000, 1371000090000, 1406353818000, 1364006284000, 1380693812000, 1353813823000, 1346190536000, 1346190536000, 1411434456000, 1410485823000, 1367294174000, 1410487119000, 1381809495000, 1409021117000, 1378837207000],
                    "criteria": [2020, 2048, 2049, 4093, 4737, 4741, 4742, 4743, 4750, 4751, 4759, 4761, 4764, 4765, 4766, 4767, 4984, 4991, 5020, 5021, 5022, 5028, 5029, 5031, 5032, 5034, 5039, 5318, 5319, 5320, 5322, 5336, 12698, 12911, 13757, 13829, 13830, 13832, 13833, 13834, 13835, 13864, 13865, 13866, 13867, 13868, 13869, 13870, 13871, 13872, 13873, 13874, 13878, 13882, 13883, 13885, 13890, 13891, 13893, 13897, 13899, 13905, 14001, 14002, 14003, 14004, 14005, 14006, 14007, 14008, 14009, 14010, 14013, 14022, 14023, 14024, 14025, 14026, 14027, 14028, 14029, 14030, 14031, 14185, 14200, 14217, 14219, 14220, 14221, 14222, 14223, 14224, 14225, 14226, 14227, 14228, 14229, 14230, 14231, 14233, 14234, 14235, 14236, 14237, 14238, 14239, 14240, 14241, 14242, 14243, 14244, 14250, 14251, 14252, 14253, 14254, 14255, 14256, 14258, 14259, 14260, 14261, 14266, 14281, 14282, 14283, 14284, 14320, 14324, 14329, 14331, 14335, 14338, 14342, 14346, 14370, 14373, 14375, 14376, 14377, 14378, 14379, 14380, 14381, 14386, 14387, 14388, 14389, 14390, 14392, 14393, 14394, 14395, 14396, 14397, 14401, 14403, 14404, 14405, 14416, 14417, 14418, 14431, 14435, 14436, 14437, 14438, 14439, 14477, 14478, 14479, 14480, 14481, 14482, 14483, 14484, 14485, 14486, 14487, 14488, 14490, 14491, 14492, 14493, 14494, 14495, 14496, 14497, 14498, 14499, 14500, 14517, 14518, 14519, 14520, 14521, 14573, 14582, 14583, 14584, 14585, 14586, 14587, 14588, 14589, 14590, 14591, 14592, 14593, 14596, 14602, 14603, 14604, 14605, 14606, 14607, 14608, 14609, 14610, 14611, 14612, 14613, 14614, 14615, 14616, 14617, 14619, 14620, 14621, 14622, 14623, 14624, 14625, 14626, 14627, 14628, 14629, 14630, 14631, 14632, 14633, 14634, 14635, 14636, 14637, 14638, 14639, 14640, 14641, 14642, 14643, 14644, 14645, 14646, 14647, 14707, 14708, 14709, 14710, 14711, 14712, 14713, 14714, 14715, 14716, 14717, 14718, 14719, 14720, 14721, 14722, 14723, 14724, 14725, 14726, 14727, 14728, 14729, 14730, 14731, 14732, 14733, 14734, 14735, 14736, 14737, 14738, 14739, 14740, 14741, 14742, 14743, 14744, 14745, 14746, 14747, 14748, 14749, 14750, 14751, 14752, 14753, 14754, 14755, 14756, 14757, 14760, 14762, 14764, 14767, 14769, 14770, 14794, 14805, 14810, 14811, 14812, 14919, 14923, 15025, 15327, 15475, 15480, 15485, 15486, 15488, 15489, 15491, 15492, 15493, 15494, 15498, 15508, 15539, 15542, 15559, 15562, 15579, 15599, 15690, 15691, 15695, 15697, 15699, 15701, 15703, 15705, 15946, 16190, 16208, 16865, 16866, 17004, 17007, 17009, 17718, 17720, 17908, 17909, 17910, 17911, 17912, 17913, 17914, 17915, 17916, 17917, 17918, 17919, 17920, 17921, 17922, 17923, 17924, 17925, 17926, 17927, 17928, 17929, 17930, 17931, 17932, 17933, 17934, 17935, 17936, 17937, 17938, 17939, 17940, 17941, 17942, 17943, 17944, 17945, 17946, 17947, 17948, 17949, 17950, 17951, 17952, 17953, 17954, 17955, 17956, 17957, 17958, 17959, 17960, 17961, 17962, 17963, 17964, 17965, 17966, 17967, 17968, 17969, 17970, 18096, 18097, 18098, 18099, 18100, 18101, 18102, 18103, 18475, 18476, 18477, 18480, 18481, 18482, 18483, 18484, 18485, 18486, 18487, 18489, 18663, 19114, 19214, 19280, 19281, 19282, 19283, 19284, 19296, 19297, 19298, 19299, 19300, 19301, 19302, 19304, 19463, 19464, 19468, 19469, 19472, 19474, 19476, 19483, 19485, 19486, 19487, 19488, 19489, 19490, 19491, 19492, 19493, 19494, 19495, 19496, 19498, 19541, 19542, 19543, 19544, 19630, 19651, 19652, 19653, 19676, 19677, 19678, 19679, 19681, 19682, 19683, 19684, 19685, 19686, 19687, 19688, 19689, 19690, 19691, 19692, 19693, 19727, 19728, 19729, 19731, 19732, 19733, 19734, 19735, 20430, 20431, 20764, 20765, 20766, 20767, 20768, 20769, 20770, 20771, 20772, 20773, 20774, 20775, 20776, 20987, 21144, 21145, 21146, 21147, 21148, 21149, 21150, 21151, 21152, 21153, 21154, 21155, 21156, 21157, 21158, 21159, 21160, 21161, 21162, 21163, 21164, 21165, 21166, 21167, 21168, 21169, 21170, 21171, 21172, 21173, 21174, 21175, 21176, 21177, 21178, 21179, 21180, 21181, 21182, 21183, 21184, 21185, 21186, 21187, 21188, 21189, 21191, 21192, 21193, 21194, 21195, 21198, 22112, 22113, 22114, 22115, 22116, 22241, 22256, 22384, 23070, 23072, 23073, 23074, 23075, 23076, 23077, 23078, 23079, 23080, 23081, 23082, 23083, 23084, 23692, 23693, 23694, 23695, 23696, 23697, 23698, 23699, 23700, 23701, 23702, 23703, 23704, 23705, 23706, 23707, 23713, 23714, 23715, 23716, 23717, 23718, 23928, 23929],
                    "criteriaQuantity": [42999, 42999, 42999, 25240846570, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 116665, 45106, 214, 10, 13, 7, 5, 1, 2, 25, 21, 42999, 42999, 42999, 42999, 42999, 1, 42999, 8662342530, 1, 1, 1, 1, 1, 1, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 200, 209, 175, 185, 149, 1, 124, 135, 35, 1, 1, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 43, 286965, 242518, 778, 1061, 1, 1, 43, 1, 2, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 38, 1275, 229, 1, 5, 1078, 1657, 1475, 1823, 803, 2, 3, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 193613, 42999, 42999, 42999, 42999, 42999, 90, 1, 1, 1, 1, 1, 1, 2, 0, 600, 600, 600, 600, 395506, 90, 90, 90, 90, 90, 90, 90, 90, 85, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 85, 85, 90, 85, 90, 90, 85, 90, 90, 90, 90, 85, 90, 90, 90, 90, 4026, 2890, 3690, 2974, 6501, 4126, 6260, 3437, 1231, 3812, 428, 1336, 5784, 1462, 1150, 238, 1321, 79, 142, 1669, 485, 350, 143, 800, 333, 1314, 699, 532, 524, 1178, 866, 437, 1015, 606, 406, 558, 3431, 1126, 353, 701, 316, 944, 1123, 629, 1688, 1, 1, 1, 1, 1, 1, 1, 1, 6, 5, 1, 6, 7, 1995, 6631, 6643, 41604, 15, 10, 0, 1, 182982, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1951, 1032, 1, 41, 30, 29, 8931, 27743, 42999, 598564, 2, 1, 1, 663, 156, 219, 1, 1, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 17015, 42999, 42074, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 281, 242, 206, 259, 237, 108, 5, 92, 2, 2, 3, 119, 119, 119, 108, 89, 80, 54, 5, 131, 1, 19, 90, 1684, 306, 102, 242, 116, 252, 76, 1403, 141, 102, 657, 276, 1, 90, 90, 90, 90, 90, 1, 42999, 21, 19, 19, 19, 14, 15, 15, 15, 15, 14, 16, 14, 3, 2, 4769, 9528, 6117, 13270, 15, 16, 16, 1, 23, 26, 37, 19, 25, 18, 28, 27, 1, 1, 1, 1, 1, 1, 1, 1, 1, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 42999, 375, 824, 132, 208, 179, 174, 111, 106, 40, 15, 14, 3, 5, 12, 59, 41, 1, 1, 1, 11, 14, 13, 11, 11, 12, 11, 13, 12, 11, 14, 13, 11, 11, 12, 11, 13, 12, 69, 67, 50, 11, 14, 13, 11, 11, 12, 11, 13, 12, 10, 11, 10, 10, 10, 10, 10, 10, 10, 176, 12, 248, 6, 3, 39, 3, 5, 35, 2, 90, 38, 90, 90, 90, 41, 14809, 20, 1, 23, 23, 22, 22, 23, 23, 23, 23, 23, 22, 22, 22, 2, 60, 58, 57, 56, 59, 59, 58, 58, 58, 46, 57, 47, 43, 40, 7, 6, 2, 19, 13, 18, 12, 7, 1, 1],
                    "criteriaTimestamp": [1346190536000, 1346190536000, 1346190536000, 1415322403000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1415321976000, 1415312036000, 1390512924000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1389844831000, 1413160398000, 1396937713000, 1414540991000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1349631165000, 1346190536000, 1415322217000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1292392037000, 1292436932000, 1292398601000, 1292395507000, 1292467267000, 1292396243000, 1294957103000, 1293986805000, 1292563217000, 1292392037000, 1292697521000, 1292395507000, 1292682208000, 1291964482000, 1302655708000, 1291939356000, 1312276690000, 1344120581000, 1301287921000, 1292402480000, 1301280297000, 1386729755000, 1297825222000, 1297826090000, 1297827100000, 1297828884000, 1297832091000, 1392607771000, 1295495349000, 1295415031000, 1295498922000, 1295930349000, 1297919408000, 1292392037000, 1292436932000, 1292432501000, 1292453403000, 1292392350000, 1292438887000, 1292446159000, 1292396243000, 1292395507000, 1292420668000, 1292978894000, 1306721320000, 1313024494000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1346490245000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1346190536000, 1318470710000, 1308541477000, 1308532485000, 1308543240000, 1308540814000, 1298268277000, 1297647708000, 1306727936000, 1370395281000, 1309148853000, 1295843947000, 1298531223000, 1298531875000, 1295843331000, 1292562627000, 1309148853000, 1295843947000, 1304916898000, 1298531223000, 1298531875000, 1292562627000, 1295843331000, 1295839284000, 1295930349000, 1414979158000, 1415321421000, 1415313480000, 1415278217000, 1415063963000, 1302655707000, 1312276689000, 1413248258000, 1301287921000, 1399010639000, 1312278268000, 1312318947000, 1306721320000, 1313024494000, 1318470710000, 1308541477000, 1308532485000, 1308543240000, 1298268276000, 1308540814000, 1297647708000, 1306727936000, 1306234294000, 1308291223000, 1303361616000, 1303362196000, 1306232186000, 1306230221000, 1306231374000, 1306230827000, 1308290357000, 1306233564000, 1328469492000, 1346489402000, 1309205425000, 1345527821000, 1345529065000, 1346190536000, 1346190536000, 1346190536000, 1349791200000, 1307582867000, 1307589095000, 1300329875000, 1297211972000, 1297242891000, 1402388479000, 1414443459000, 1399851698000, 1402034526000, 1402996376000, 1414280351000, 1414282057000, 1414282877000, 1291945829000, 1292044035000, 1292107712000, 1292032578000, 1291939356000, 1292145205000, 1291896031000, 1292126724000, 1291945830000, 1292044036000, 1292107712000, 1292032578000, 1291966366000, 1291939356000, 1415322130000, 1292372789000, 1292139073000, 1292318133000, 1292226339000, 1292365173000, 1400709231000, 1400665416000, 1400665416000, 1400665416000, 1400665416000, 1400665416000, 1400665416000, 1291964482000, 1291939356000, 1292395103000, 1292585363000, 1292398601000, 1292395103000, 1415315460000, 1292684897000, 1308774143000, 1292398586000, 1292458397000, 1296859780000, 1292436563000, 1292691141000, 1399357314000, 1313375023000, 1292420668000, 1294813915000, 1381900971000, 1366223719000, 1366239131000, 1366198251000, 1366588123000, 1366352716000, 1403049831000, 1292453403000, 1292998986000, 1292446159000, 1292627096000, 1292438449000, 1293351788000, 1382502430000, 1294811305000, 1293321281000, 1302671634000, 1292537811000, 1294947533000, 1296108160000, 1292999829000, 1292547771000, 1410750109000, 1292458953000, 1308683121000, 1297384259000, 1385261698000, 1406523121000, 1293572094000, 1314679247000, 1366236780000, 1384665222000, 1414381941000, 1313134548000, 1415069829000, 1415146890000, 1415232233000, 1415068294000, 1415315460000, 1415069586000, 1415069632000, 1415069791000, 1414965674000, 1415068459000, 1414434973000, 1415066138000, 1415069835000, 1415313770000, 1414734850000, 1413559255000, 1415067443000, 1413604646000, 1414374116000, 1415146836000, 1414372770000, 1413990707000, 1413556933000, 1414868591000, 1414085576000, 1414734842000, 1414983363000, 1414303709000, 1414966891000, 1414901773000, 1415069364000, 1414372471000, 1415069855000, 1414437595000, 1414902159000, 1414431578000, 1414966905000, 1414436764000, 1413561482000, 1415232235000, 1414373682000, 1414559187000, 1414967239000, 1414983025000, 1414716099000, 1292053127000, 1292718993000, 1292034073000, 1292536025000, 1292195637000, 1292178287000, 1292392037000, 1296006598000, 1394094995000, 1385723430000, 1292438887000, 1402764833000, 1292880416000, 1411434456000, 1415318544000, 1415322112000, 1415292331000, 1293856720000, 1297655375000, 1293856720000, 1297184366000, 1415321076000, 1292300881000, 1309288886000, 1293774283000, 1309313189000, 1309456760000, 1309291855000, 1386707876000, 1331500629000, 1393359483000, 1309489056000, 1413676864000, 1384759458000, 1384641477000, 1384759458000, 1384641477000, 1384759458000, 1384759458000, 1412740168000, 1400057258000, 1324263827000, 1392607771000, 1324268436000, 1340078127000, 1415314180000, 1415322030000, 1291758587000, 1414958577000, 1291966366000, 1303864335000, 1303867227000, 1415154473000, 1415154473000, 1414538983000, 1318382508000, 1346190536000, 1309284303000, 1309284187000, 1309284159000, 1309284159000, 1309284303000, 1309284187000, 1309284159000, 1309284187000, 1309284538000, 1309284187000, 1309284538000, 1309284159000, 1309284159000, 1309284538000, 1309284159000, 1309284159000, 1309284538000, 1309284227000, 1309284538000, 1309284159000, 1309284538000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284187000, 1309284159000, 1309284227000, 1309284159000, 1309284187000, 1309284159000, 1309284227000, 1309284159000, 1309284227000, 1309284159000, 1309284159000, 1309284159000, 1309284187000, 1309284159000, 1309284227000, 1309284187000, 1309284159000, 1309284187000, 1309284538000, 1309284159000, 1309284159000, 1309284227000, 1309284187000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284227000, 1309284538000, 1309284538000, 1309284159000, 1309284187000, 1309284187000, 1309284159000, 1346190536000, 1309284187000, 1309284187000, 1392360299000, 1392360632000, 1392360512000, 1392360118000, 1392360745000, 1392360981000, 1392361162000, 1392361162000, 1380345759000, 1380347119000, 1380348320000, 1323830687000, 1323831809000, 1323833278000, 1387859827000, 1387860192000, 1387860478000, 1323918296000, 1323926737000, 1337655740000, 1329197559000, 1410490758000, 1348610102000, 1414965495000, 1414962903000, 1411715972000, 1413863438000, 1411779441000, 1414033996000, 1409930698000, 1415057596000, 1414036725000, 1414112971000, 1414300602000, 1414434900000, 1353975272000, 1402586964000, 1403235297000, 1400649684000, 1400825588000, 1402976018000, 1400643805000, 1348573833000, 1412816382000, 1410488118000, 1410489040000, 1410490266000, 1412646539000, 1410316932000, 1410317449000, 1410317841000, 1410319114000, 1410319647000, 1410831651000, 1410831867000, 1409023467000, 1410319647000, 1415314180000, 1415322030000, 1415322112000, 1415292331000, 1410317996000, 1410830867000, 1410830944000, 1406002224000, 1413248258000, 1413247418000, 1413246705000, 1412817138000, 1413247856000, 1411789978000, 1413247053000, 1412815185000, 1349631165000, 1349631165000, 1349631165000, 1349631165000, 1349631165000, 1349631165000, 1349631165000, 1349631165000, 1349631165000, 1348557521000, 1348634504000, 1348652840000, 1348800103000, 1348687334000, 1348584407000, 1346190536000, 1352894940000, 1403070292000, 1415146583000, 1407128651000, 1414277568000, 1400089956000, 1414857063000, 1387429740000, 1403977775000, 1404110608000, 1348794526000, 1356763949000, 1369424260000, 1358289455000, 1351664697000, 1415160418000, 1412815185000, 1406071769000, 1406002224000, 1406071769000, 1411864875000, 1411863761000, 1412215473000, 1411866227000, 1412218017000, 1412392103000, 1412395730000, 1411870955000, 1412388956000, 1411864875000, 1411863761000, 1412215473000, 1411866227000, 1412218017000, 1412392103000, 1412395730000, 1411870955000, 1412388956000, 1412395730000, 1412395730000, 1412395730000, 1411864875000, 1411863761000, 1412215473000, 1411866227000, 1412218017000, 1412392103000, 1412395730000, 1411870955000, 1412388956000, 1411864875000, 1411863761000, 1412215473000, 1411866227000, 1412218017000, 1412392103000, 1412395730000, 1411870955000, 1412388956000, 1412916909000, 1412388956000, 1414282877000, 1349495311000, 1349497837000, 1412726985000, 1353813823000, 1348822725000, 1412727658000, 1353815864000, 1413819936000, 1350164070000, 1366196410000, 1348610102000, 1378576594000, 1413247418000, 1415319039000, 1410487587000, 1413259040000, 1413248966000, 1413249611000, 1413250059000, 1413250381000, 1413251035000, 1413251465000, 1413251809000, 1413252203000, 1413253118000, 1413253529000, 1413254445000, 1413259040000, 1413259761000, 1415154472000, 1415155112000, 1415155596000, 1415156115000, 1415156968000, 1415157353000, 1415158030000, 1415158561000, 1415159376000, 1415161375000, 1415160128000, 1415160757000, 1415162456000, 1415164152000, 1415164152000, 1412910824000, 1389847374000, 1415284652000, 1413836935000, 1411597829000, 1414873491000, 1413981814000, 1378829484000, 1378829484000],
                    "criteriaCreated": [1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1389844838000, 1413160404000, 1378688415000, 1355753908000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1349631174000, 1346190547000, 1293079471000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1292392037000, 1292396243000, 1292392350000, 1292395103000, 1292398586000, 1292396243000, 1292456342000, 1292392037000, 1292392350000, 1292392037000, 1292446159000, 1292395103000, 1291708892000, 1291964482000, 1302655708000, 1291939356000, 1312276690000, 1344120581000, 1301287921000, 1292402480000, 1301280297000, 1386729768000, 1293681423000, 1292804930000, 1294371217000, 1294125278000, 1294892833000, 1297919408000, 1293510348000, 1292902195000, 1294620297000, 1295930349000, 1297919408000, 1292392037000, 1292436932000, 1292432501000, 1292395103000, 1292392350000, 1292438887000, 1292446159000, 1292396243000, 1292395507000, 1292398601000, 1292978894000, 1306721320000, 1313024494000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346490254000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1346190547000, 1318470710000, 1308541477000, 1308532485000, 1308543240000, 1308540814000, 1298268277000, 1297647708000, 1306727936000, 1383164238000, 1309148853000, 1295843947000, 1298531223000, 1298531875000, 1295843331000, 1292562627000, 1309148853000, 1295843947000, 1304916898000, 1298531223000, 1298531875000, 1292562627000, 1295843331000, 1295839284000, 1295930349000, 1292804213000, 1291712782000, 1291731280000, 1367307856000, 1365123295000, 1302655707000, 1312276689000, 1344117890000, 1301287921000, 1292402480000, 1312278268000, 1312318947000, 1306721320000, 1313024494000, 1318470710000, 1308541477000, 1308532485000, 1308543240000, 1298268276000, 1308540814000, 1297647708000, 1306727936000, 1306234294000, 1308291223000, 1303361616000, 1303362196000, 1306232186000, 1306230221000, 1306231374000, 1306230827000, 1308290357000, 1306233564000, 1328469492000, 1346489405000, 1309205425000, 1345527821000, 1345529065000, 1346190547000, 1346190547000, 1346190547000, 1349791201000, 1292284685000, 1294936155000, 1291712235000, 1297211972000, 1297203735000, 1365806772000, 1365819295000, 1367476912000, 1355459037000, 1367105820000, 1292145205000, 1291896031000, 1292126724000, 1291945829000, 1292044035000, 1292107712000, 1292032578000, 1291939356000, 1292145205000, 1291896031000, 1292126724000, 1291945830000, 1292044036000, 1292107712000, 1292032578000, 1291966366000, 1291939356000, 1291709726000, 1291763812000, 1291745289000, 1291776022000, 1291718241000, 1291709498000, 1400709235000, 1400665418000, 1400665418000, 1400665418000, 1400665418000, 1400665418000, 1400665418000, 1291964482000, 1291939356000, 1292392037000, 1292392037000, 1292392037000, 1292392037000, 1291735447000, 1292432501000, 1308774143000, 1292398586000, 1292395507000, 1296859780000, 1292436563000, 1292436932000, 1330916064000, 1313375023000, 1292398601000, 1294813915000, 1371186878000, 1366223733000, 1366239143000, 1366198265000, 1366588131000, 1366352730000, 1292732897000, 1292395103000, 1292998986000, 1292446159000, 1292627096000, 1292392350000, 1293351788000, 1292997159000, 1294811305000, 1293321281000, 1302671634000, 1292537811000, 1294947533000, 1296108160000, 1292999829000, 1292547771000, 1313378545000, 1292392037000, 1308683121000, 1297295271000, 1303017376000, 1309047999000, 1293572094000, 1314343065000, 1366236793000, 1366324503000, 1298646334000, 1312932438000, 1291973245000, 1291960889000, 1292053127000, 1291974290000, 1291930215000, 1291930219000, 1291959996000, 1291973625000, 1292186820000, 1291907362000, 1292536024000, 1291960857000, 1291907188000, 1291960112000, 1291959998000, 1291960547000, 1292052662000, 1292536024000, 1292718992000, 1292033928000, 1292134097000, 1292127043000, 1292126846000, 1292114597000, 1292018860000, 1291906966000, 1292019198000, 1292033990000, 1291961673000, 1292034073000, 1292133002000, 1291973338000, 1291960116000, 1292087603000, 1291961778000, 1292195637000, 1291906924000, 1291973913000, 1292126865000, 1292018936000, 1292178286000, 1291930188000, 1291930177000, 1292052858000, 1291930228000, 1292053127000, 1292718993000, 1292034073000, 1292536025000, 1292195637000, 1292178287000, 1292392037000, 1296006598000, 1342585822000, 1295068600000, 1292438887000, 1303176285000, 1292880416000, 1291709785000, 1346194725000, 1357437929000, 1291711394000, 1293856720000, 1297655375000, 1293856720000, 1297184366000, 1291709227000, 1292300881000, 1309288886000, 1293774283000, 1309313189000, 1309284538000, 1309291855000, 1386707885000, 1331500629000, 1393359497000, 1309313189000, 1413676867000, 1384759459000, 1384641487000, 1384759459000, 1384641487000, 1384759459000, 1384759459000, 1293437135000, 1293657489000, 1324263827000, 1321847063000, 1324268436000, 1340078127000, 1291742870000, 1291770963000, 1291708892000, 1291721652000, 1291966366000, 1303864335000, 1303867227000, 1303864335000, 1303872364000, 1303864335000, 1318382508000, 1346190547000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284187000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284227000, 1309284159000, 1309284159000, 1309284159000, 1309284227000, 1309284159000, 1309284159000, 1309284159000, 1309284187000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1309284227000, 1309284159000, 1309284187000, 1309284159000, 1309284159000, 1309284159000, 1309284159000, 1346190547000, 1309284159000, 1309284159000, 1309831664000, 1309841695000, 1311049113000, 1310094333000, 1309849765000, 1312254273000, 1314679437000, 1339646381000, 1322602325000, 1322604907000, 1322610227000, 1322621105000, 1322628217000, 1322631133000, 1322709555000, 1323146309000, 1323149335000, 1323407509000, 1323926737000, 1337655740000, 1329197559000, 1351220702000, 1348610119000, 1348728063000, 1349603885000, 1348892214000, 1348779983000, 1353457216000, 1354181068000, 1354278632000, 1354003807000, 1353981838000, 1354184395000, 1354099654000, 1354251037000, 1353975279000, 1402586977000, 1401935566000, 1400649690000, 1400825600000, 1402976021000, 1400643810000, 1348573838000, 1348956725000, 1351050574000, 1351052459000, 1351053617000, 1351226516000, 1354852605000, 1354854128000, 1354855652000, 1354861846000, 1355208448000, 1355895355000, 1355898054000, 1381816124000, 1392359394000, 1358102541000, 1352792009000, 1372867385000, 1348562871000, 1354858802000, 1355889054000, 1355893944000, 1406002226000, 1349158982000, 1348993466000, 1348990678000, 1349086706000, 1348909211000, 1348989239000, 1348968129000, 1348955198000, 1349631174000, 1349631174000, 1349631174000, 1349631174000, 1349631174000, 1349631174000, 1349631174000, 1349631174000, 1349631174000, 1348557534000, 1348634516000, 1348652850000, 1348800105000, 1348687350000, 1348584416000, 1346190547000, 1352894942000, 1359696598000, 1348906804000, 1349404986000, 1350442573000, 1349750441000, 1349668594000, 1349146853000, 1349581094000, 1348988421000, 1348794535000, 1356763959000, 1369424270000, 1358289466000, 1351664705000, 1358316576000, 1348955198000, 1406071784000, 1406002226000, 1406071784000, 1375935354000, 1376886745000, 1365832442000, 1375937639000, 1375334131000, 1375328412000, 1376892614000, 1375933222000, 1376286413000, 1375935354000, 1376886745000, 1365832442000, 1375937639000, 1375334131000, 1375328412000, 1376892614000, 1375933222000, 1376286413000, 1382334245000, 1382493564000, 1394939525000, 1375935354000, 1376886745000, 1365832442000, 1375937639000, 1375334131000, 1375328412000, 1376892614000, 1375933222000, 1376286413000, 1377752423000, 1378359418000, 1378963642000, 1378353479000, 1378355484000, 1377747134000, 1378357194000, 1377751008000, 1378959192000, 1371085808000, 1409973929000, 1380695943000, 1349495314000, 1349497839000, 1349493132000, 1353813828000, 1348822733000, 1349496115000, 1353815864000, 1395640848000, 1350164073000, 1366196415000, 1348610119000, 1378576601000, 1348970276000, 1355062204000, 1351049292000, 1413259053000, 1367383472000, 1367384819000, 1367385844000, 1367549014000, 1367551005000, 1367552071000, 1367553097000, 1367554024000, 1367556094000, 1367557741000, 1367558628000, 1367897771000, 1410487123000, 1381897626000, 1381901971000, 1382068303000, 1382069080000, 1382070774000, 1382072029000, 1382072875000, 1382073747000, 1382074412000, 1382412632000, 1382409885000, 1382410696000, 1382413783000, 1382420241000, 1410314642000, 1409021126000, 1380595731000, 1378837212000, 1378850304000, 1378837442000, 1378846572000, 1378859535000, 1378829494000, 1378829494000]
                },
                "emblem": {
                    "icon": 54,
                    "iconColor": "ffb1b8b1",
                    "border": 1,
                    "borderColor": "fff9cc30",
                    "backgroundColor": "ff006391"
                }
            };



        $scope.progressCurrent = 27;
        $scope.progressMax = 50;
        $scope.stroke = 15;
        $scope.radius = 50;
        $scope.progressColor = "#069";
        $scope.bgColor = '#eaeaea';
        $scope.isSemi = false;
        $scope.showGuild = false;


        $scope.wodNormalsData = {
            "0hm" :{
                "name" : "Highmaul",
                "currentKills" : 7,
                "total" : 7
            },
            "1brf" : {
                "name" : "Blackrock Foundry",
                "currentKills" : 0,
                "total" : 7
            },
            "2world" : {
                "name" : "World Bosses",
                "currentKills" : 2,
                "total" : 3
            },
            "3total" : {
                "name" : "Total",
                "total": 17,
                "currentKills" : 9
            }
        };

        $scope.wodHeroicData = {
            "0hm" :{
                "name" : "Highmaul",
                "currentKills" : 2,
                "total" : 7
            },
            "1brf" : {
                "name" : "Blackrock Foundry",
                "currentKills" : 3,
                "total" : 7
            },
            "2world" : {
                "name" : "World Bosses",
                "currentKills" : 0,
                "total" : 3
            },
            "3total" : {
                "name" : "Total",
                "total": 17,
                "currentKills" : 5
            }
        };

        $scope.mopData = {
            "0msv" :{
                "name" : "Mogu'shan vaults",
                "currentKills" : 0,
                "total" : 6
            },
            "1hof" : {
                "name" : "Heart of Fear",
                "currentKills" : 0,
                "total" : 6
            },
            "2tos" : {
                "name" : "Terrace of Endless Spring",
                "currentKills" : 0,
                "total" : 4
            },
            "3tot" : {
                "name" : "Throne of Thunder",
                "currentKills" : 0,
                "total" : 13
            },
            "4soo" : {
                "name" : "Siege of Orgrimmar",
                "currentKills" : 0,
                "total" : 14
            },
            "5total" : {
                "name" : "Total",
                "total": 43,
                "currentKills" : 0
            }

        };





        $scope.cataData = {
            "0bwd" :{
                "name" : "Blackwing Descent",
                "currentKills" : 0,
                "total" : 6
            },
            "1bot" : {
                "name" : "Bastion of Twilight",
                "currentKills" : 0,
                "total" : 5
            },
            "2tfw" : {
                "name" : "Throne of the Four Winds",
                "currentKills" : 0,
                "total" : 2
            },
            "3bd" : {
                "name" : "Baradin Hold",
                "currentKills" : 0,
                "total" : 3
            },
            "4firelands" : {
                "name" : "Firelands",
                "currentKills" : 0,
                "total" : 7
            },
            "5ds" : {
                "name" : "DragonSoul",
                "currentKills" : 0,
                "total" : 8
            },
            "6total" : {
                "name" : "Total",
                "total": 31,
                "currentKills" : 0
            }
        };

        $scope.wotlkData = {
            "0nax" :{
                "name" : "Naxxramas",
                "currentKills" : 0,
                "total" : 19
            },
            "1onyx" : {
                "name" : "Bastion of Twilight",
                "currentKills" : 0,
                "total" : 1
            },
            "2eoe" : {
                "name" : "Eye of Eternity",
                "currentKills" : 0,
                "total" : 1
            },
            "3voa" : {
                "name" : "Vault of Archavon",
                "currentKills" : 0,
                "total" : 4
            },
            "4coa" : {
                "name" : "Chamber of Aspects",
                "currentKills" : 0,
                "total" : 2
            },
            "5cc" : {
                "name" : "Crusaders' Coliseum",
                "currentKills" : 0,
                "total" : 5
            },
            "6ulduar" : {
                "name" : "Ulduar",
                "currentKills" : 0,
                "total" : 14
            },
            "7icc" : {
                "name" : "Ice Crown Citadel",
                "currentKills" : 0,
                "total" : 12
            },
            "8total" : {
                "name" : "Total",
                "total": 58,
                "currentKills" : 0
            }
        };


        $scope.welcomeMessage = "Welcome to your Boss Collection"
        $scope.guild = "";
        $scope.realm = "Zul'jin";
        $scope.characterName = "Defragmentor";
        $scope.character = {};
        $scope.classColor = "shamanClassColor";
        $scope.iLvl = "";
        $scope.achievmentPoints = $scope.character.achievementPoints;
        $scope.characterImage = "";
        $scope.showLoadingGif = false;

        $scope.$watch('character', function (newValue, oldValue) {
            $scope.achievmentPoints = $scope.character.achievementPoints;
        }, true);

        var staticResources = "http://us.battle.net/static-render/us/";
/*
        var guildKills = guildServices.checkGuild(guild.achievements);

        guildKills.then(function(data){
            $scope.mopData["4soo"].currentKills = data.killCount;
        });
*/
        $scope.getGuild = function(){

            var promise = guildServices.getGuild($scope.realm, $scope.guild);

            promise.then(function(data){
                var promise2 = guildServices.checkGuild(data.achievements);

                promise2.then(function(data){
                    $scope.mopData["4soo"].currentKills = data.killCount;
                })
            })
        }

        $scope.getCharacter = function() {

            $scope.showLoadingGif = true;
            var promise = charService.getCharacter($scope.realm, $scope.characterName);

            promise.then(function(result){
                $scope.character = result;

                $scope.classColor = charService.getClass($scope.character) + "ClassColor";

                $scope.iLvl = charService.getiLvl($scope.character);

                $scope.characterImage = staticResources + result.thumbnail;
                $scope.showGuild = true;
                $scope.showLoadingGif = false;

            },
            function(error){
                $scope.showLoadingGif = false;
            });

            $timeout(function(){
                $scope.showLoadingGif = false;
            }, 5000);

        }


    }])
   .controller("viewEventController", ["$scope", 'EventService', '$location', 'SaveEventService', '$timeout', function($scope, EventService, $location, SaveEventService, $timeout){

        var path = $location.path().split('/');
        var pathSize = path.length;
        $scope.event = {};
        $scope.iminResponse = true;
        $scope.isVisible = false;

        $scope.editable = false;
        $scope.editButton = "Edit";

        $scope.addedToYes = false;
        $scope.addedToMaybe = false;
        $scope.addedToNopes = false;



        $scope.newAttendee = "";
        $scope.newAttendeeToAdd = {userName: ""};
        $('addAttendee').prop('disabled', true);

        $('#showMap').popover({
            content: 'No valid location could be found. Update the location if you wish to see it in Google Maps.',
            trigger: 'manual'
        })

        $scope.editFields = function(){
            $scope.editable = !$scope.editable
            if($scope.editable){
                $scope.editButton = "Save";
            }
            else{
                $scope.editButton = "Edit";
                $scope.saveEvent();
            }
        };

        $scope.tabs = [
            {
                "title":"ImIn",
                "template" : "TabJadeFiles/ImInTab.jade"
            },
            {
                "title": "Maybe",
                "template" : "TabJadeFiles/MaybeTab.jade"
            },
            {
                "title": "Not Coming",
                "template" : "TabJadeFiles/NotComingTab.jade"
            }
        ];

        $scope.tabs.active = 0;


        var map;
        function initialize() {
            var mapOptions = {
                zoom: 8,
                center: new google.maps.LatLng(-34.397, 150.644)
            };
            map = new google.maps.Map(document.getElementById('map-canvas'),
                mapOptions);
        }


        google.maps.event.addDomListener(window, 'load', initialize);



        var eventService = EventService.getSingleEvent({"eventID":path[pathSize - 1]}, function(result){
            $scope.updateEvent();
        });



        $scope.getLatLong = function(address){
            var geocoder = new google.maps.Geocoder();

            geocoder.geocode( { 'address': address}, function(results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    //In this case it creates a marker, but you can get the lat and lng from the location.LatLng
                    map.setCenter(results[0].geometry.location);
                    var marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location
                    });
                    map.setZoom(13)

                } else {
                    console.log("Showing popover");
                    $('#showMap').popover('show');
                }
            });
        };

        $scope.reloadMaps = function(){

            initialize();

            $scope.getLatLong($scope.event.eventLocation);
        };

        $scope.showMap = function(){

            $scope.isVisible = !$scope.isVisible;
            console.log($scope.isVisible);

            if($scope.isVisible) {
                $timeout(function () {
                    $scope.reloadMaps();
                }, 200)
            }
            else{
                $('#showMap').popover('hide');
            }

        };

        $scope.refreshMap = function(){
            google.maps.event.trigger(map,'resize')
        }


        $scope.updateEvent = function(){

            $scope.event.eventName = eventService[0].eventName;
            $scope.event._id = eventService[0]._id;
            $scope.event.eventDate = new Date(eventService[0].eventDate);
            $scope.event.eventLocation = eventService[0].eventLocation

            $scope.event.attendees = eventService[0].attendees;
            $scope.event.maybe = eventService[0].maybe;
            $scope.event.nopes = eventService[0].nopes;


            $scope.welcomeMessage = $scope.event.eventName;


        };

        $scope.addAttendee = function(){

           if($scope.newAttendee.length > 0 && ($scope.addedToYes === true ||
                                                $scope.addedToMaybe === true ||
                                                $scope.addedToNopes=== true)){

               $scope.saveEvent();
               $('#ImInQuestionair').modal('hide');
               $('#enterName').popover('hide');
           }
           else{
               $('#enterName').popover('show');
           }

        };

        $scope.saveEvent = function(){
            var saveEvent = new SaveEventService();
            console.log(saveEvent);
            SaveEventService.update({eventID: $scope.event._id}, {data: $scope.event});
        }

        $scope.ImIn = function(){

            $scope.newAttendeeToAdd.userName = $scope.newAttendee;

            if($scope.newAttendee.length > 0) {

                if ($scope.addedToYes === true) {

                }
                else {
                    if ($scope.addedToMaybe === true) {

                        $scope.addedToMaybe = false
                        $scope.event.maybe.pop();
                    }
                    else if ($scope.addedToNopes === true) {

                        $scope.addedToNopes = false
                        $scope.event.nopes.pop();
                    }

                    $scope.event.attendees.push($scope.newAttendeeToAdd)
                }

                $scope.addedToYes = true;

                console.log("Attendees" + $scope.event.attendees);
            }
            else{
                $('#enterName').popover('show');
            }

        };

        $scope.maybe = function(){

            $scope.newAttendeeToAdd.userName = $scope.newAttendee;

            if($scope.newAttendee.length > 0) {

                if($scope.addedToMaybe === true){

                }
                else{
                    if($scope.addedToYes === true){

                        $scope.addedToYes = false
                        $scope.event.attendees.pop();
                    }
                    else if($scope.addedToNopes === true){

                        $scope.addedToNopes = false
                        $scope.event.nopes.pop();
                    }

                    $scope.event.maybe.push($scope.newAttendeeToAdd)
                }

                $scope.addedToMaybe = true;
            }
            else{
                $('#enterName').popover('show');
            }
        }

        $scope.nopes = function(){

            $scope.newAttendeeToAdd.userName = $scope.newAttendee;

            if($scope.newAttendee.length > 0) {

                if ($scope.addedToNopes === true) {
                    //Do nothing
                }
                else {
                    if ($scope.addedToYes === true) {

                        $scope.addedToYes = false;
                        $scope.event.attendees.pop();
                    }
                    else if ($scope.addedToMaybe === true) {

                        $scope.addedToMaybe = false
                        $scope.event.maybe.pop();
                    }

                    $scope.event.nopes.push($scope.newAttendeeToAdd)
                }

                $scope.addedToNopes = true;
            }
            else{
                $('#enterName').popover('show');
            }
        }

        $scope.nevermind = function(){

            if($scope.addedToYes === true){

                $scope.addedToYes = false;
                $scope.event.attendees.pop();
            }
            else if($scope.addedToMaybe === true){

                $scope.addedToMaybe = false
                $scope.event.maybe.pop();
            }
            else if($scope.addedToNopes === true){

                $scope.addedToNopes = false
                $scope.event.nopes.pop();
            }
        }

    }]);







