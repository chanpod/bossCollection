var _ = require('lodash');
var q = require('q');
var GuildModel = require('models/guild.js');
var myExports = {
    
    saveSession: (req, res) => {
        var defer = q.defer();
        
        console.log("Updating session");
        console.log("User: " + req.session.user.name);
        
        res.cookie('user', req.session.user, { maxAge: 90000000 });
        
        req.session.save(() => {
                        
            // update the user's login cookies if they exists //
            if (req.session.user != undefined) {                
                
                console.log("Session update complete");
                defer.resolve(req.session.user);                
            }
            else{
                console.log("Uh oh, session Broke. No user defined?");
                defer.reject("No session user defined.")
            }
        });
        
        return defer.promise;
    },
    handleErrors: (err) => {
        var errObject = {}
        if (err.message) {
            errObject = {message: err.message };
        }
        else {
            errObject = {message: err };
        }
        
        return errObject;
    },
    userExist: (req) => {

        if (req.session.user) {
            return true;
        }
        else {
            return false;
        }
    },
    userHasGuild: (req) => {
        
        var hasGuild = false;
        
        if (myExports.userExist(req)) {

            if (req.session.user.guild) {
                
                hasGuild = true;
            }
        }
        
        return hasGuild;
    },
    userStillInGuild: (req) => {

        var defer = q.defer();


        try {
            
        findUsersGuild(req.session.user.name)
            .then((result) => {

                if (result != undefined) {
                    defer.resolve(true);    
                }
                else {
                    defer.resolve(false);
                }
            })
        }
        catch (err) {
            defer.resolve(false);
        }
        
        return defer.promise;
    },
    checkUserPermissions: (guildUser, permissions) => {

        let hasPermission = false;
        let userRank = guildUser.rank;
        let permissionRank = permissions.minRank;

        if (guildUser.GM || guildUser.officer) {
            hasPermission = true;
        }
        else if (userRank <= permissionRank) {
            hasPermission = true;
        }
        else if (permissions.public && guildUser.rank >= permissions.minRank) {
            hasPermission = true;
        }

        return hasPermission;
    }
}

function findUsersGuild(username) {
    var defer = q.defer();

    GuildModel.findOne({ members: { $elemMatch: { user: username } } })
        .then(function (guildFound) {


            defer.resolve(guildFound);

        }, function (err) {

            defer.reject(err);
        })

    return defer.promise;
}

module.exports = myExports;